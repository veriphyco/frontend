{"version":3,"sources":["app/modules/apps/user-management/users-list/core/_requests.ts","app/modules/apps/user-management/users-list/core/QueryRequestProvider.tsx","app/modules/apps/user-management/users-list/core/QueryResponseProvider.tsx","app/modules/apps/user-management/users-list/core/ListViewProvider.tsx","app/modules/apps/user-management/users-list/components/header/UsersListFilter.tsx","app/modules/apps/user-management/users-list/components/header/UserListToolbar.tsx","app/modules/apps/user-management/users-list/components/header/UsersListGrouping.tsx","app/modules/apps/user-management/users-list/components/header/UsersListSearchComponent.tsx","app/modules/apps/user-management/users-list/components/header/UsersListHeader.tsx","app/modules/apps/user-management/users-list/table/columns/CustomHeaderColumn.tsx","app/modules/apps/user-management/users-list/table/columns/CustomRow.tsx","app/modules/apps/user-management/users-list/table/columns/UserInfoCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserLastLoginCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserTwoStepsCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserActionsCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserSelectionCell.tsx","app/modules/apps/user-management/users-list/table/columns/UserCustomHeader.tsx","app/modules/apps/user-management/users-list/table/columns/UserSelectionHeader.tsx","app/modules/apps/user-management/users-list/table/columns/_columns.tsx","app/modules/apps/user-management/users-list/components/loading/UsersListLoading.tsx","app/modules/apps/user-management/users-list/components/pagination/UsersListPagination.tsx","app/modules/apps/user-management/users-list/table/UsersTable.tsx","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModalHeader.tsx","app/modules/apps/user-management/users-list/core/_models.ts","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModalForm.tsx","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModalFormWrapper.tsx","app/modules/apps/user-management/users-list/user-edit-modal/UserEditModal.tsx","app/modules/apps/user-management/users-list/UsersList.tsx","app/modules/apps/user-management/UsersPage.tsx"],"names":["API_URL","process","USER_URL","GET_USERS_URL","createUser","user","axios","put","then","response","data","updateUser","post","id","QueryRequestContext","createContext","initialQueryRequest","QueryRequestProvider","children","useState","state","setState","Provider","value","updateState","updates","updatedState","useQueryRequest","useContext","QueryResponseContext","createResponseContext","initialQueryResponse","QueryResponseProvider","stringifyRequestQuery","query","setQuery","updatedQuery","useMemo","useEffect","useQuery","QUERIES","USERS_LIST","get","d","getUsers","cacheTime","keepPreviousData","refetchOnWindowFocus","isFetching","refetch","isLoading","useQueryResponse","useQueryResponseData","useQueryResponseLoading","ListViewContext","initialListView","ListViewProvider","selected","setSelected","itemIdForUpdate","setItemIdForUpdate","disabled","calculatedGroupingIsDisabled","isAllSelected","calculateIsAllDataSelected","onSelect","groupingOnSelect","onSelectAll","groupingOnSelectAll","clearSelected","useListView","UsersListFilter","role","setRole","lastLogin","setLastLogin","MenuComponent","reinitialization","type","className","path","onChange","e","target","onClick","filter","last_login","initialQueryState","undefined","UsersListToolbar","UsersListGrouping","queryClient","useQueryClient","deleteSelectedItems","useMutation","userIds","requests","map","delete","all","deleteSelectedUsers","onSuccess","invalidateQueries","length","mutateAsync","UsersListSearchComponent","searchTerm","setSearchTerm","debouncedSearchTerm","useDebounce","search","placeholder","UsersListHeader","CustomHeaderColumn","column","Header","getHeaderProps","render","CustomRow","row","getRowProps","cells","cell","getCellProps","clsx","UserInfoCell","href","avatar","src","toAbsoluteUrl","alt","name","initials","label","email","UserLastLoginCell","UserTwoStepsCell","two_steps","UserActionsCell","deleteItem","userId","UserSelectionCell","isSelected","includes","checked","UserCustomHeader","title","tableProps","isSelectedForSorting","sort","order","style","cursor","UserSelectionHeader","usersColumns","props","Cell","index","accessor","UsersListLoading","borderRadius","boxShadow","backgroundColor","color","fontWeight","margin","width","padding","top","left","position","textAlign","UsersListPagination","pagination","defaultPaginationState","links","payload","useQueryResponsePagination","link","active","page","previous","next","items_per_page","dangerouslySetInnerHTML","__html","UsersTable","users","columns","useTable","getTableProps","getTableBodyProps","headers","rows","prepareRow","i","colSpan","UserEditModalHeader","initialUser","editUserSchema","Yup","shape","min","max","required","UserEditModalForm","isUserLoading","userForEdit","cancel","withRefresh","blankImg","userAvatarImg","formik","useFormik","initialValues","validationSchema","onSubmit","values","setSubmitting","isNotEmpty","console","error","handleSubmit","noValidate","backgroundImage","getFieldProps","touched","errors","autoComplete","isSubmitting","htmlFor","isValid","UserEditModalFormWrapper","enabledQuery","enabled","onError","err","UserEditModal","document","body","classList","add","remove","tabIndex","UsersList","UsersListWrapper","usersBreadcrumbs","isSeparator","isActive","UsersPage","element","breadcrumbs","to"],"mappings":"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","file":"static/js/9.4c88f68c.chunk.js","sourcesContent":["import axios, {AxiosResponse} from 'axios'\r\nimport {ID, Response} from '../../../../../../_metronic/helpers'\r\nimport {User, UsersQueryResponse} from './_models'\r\n\r\nconst API_URL = process.env.REACT_APP_THEME_API_URL\r\nconst USER_URL = `${API_URL}/user`\r\nconst GET_USERS_URL = `${API_URL}/users/query`\r\n\r\nconst getUsers = (query: string): Promise<UsersQueryResponse> => {\r\n  return axios\r\n    .get(`${GET_USERS_URL}?${query}`)\r\n    .then((d: AxiosResponse<UsersQueryResponse>) => d.data)\r\n}\r\n\r\nconst getUserById = (id: ID): Promise<User | undefined> => {\r\n  return axios\r\n    .get(`${USER_URL}/${id}`)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst createUser = (user: User): Promise<User | undefined> => {\r\n  return axios\r\n    .put(USER_URL, user)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst updateUser = (user: User): Promise<User | undefined> => {\r\n  return axios\r\n    .post(`${USER_URL}/${user.id}`, user)\r\n    .then((response: AxiosResponse<Response<User>>) => response.data)\r\n    .then((response: Response<User>) => response.data)\r\n}\r\n\r\nconst deleteUser = (userId: ID): Promise<void> => {\r\n  return axios.delete(`${USER_URL}/${userId}`).then(() => {})\r\n}\r\n\r\nconst deleteSelectedUsers = (userIds: Array<ID>): Promise<void> => {\r\n  const requests = userIds.map((id) => axios.delete(`${USER_URL}/${id}`))\r\n  return axios.all(requests).then(() => {})\r\n}\r\n\r\nexport {getUsers, deleteUser, deleteSelectedUsers, getUserById, createUser, updateUser}\r\n","import {FC, useState, createContext, useContext} from 'react'\r\nimport {\r\n  QueryState,\r\n  QueryRequestContextProps,\r\n  initialQueryRequest,\r\n} from '../../../../../../_metronic/helpers'\r\n\r\nconst QueryRequestContext = createContext<QueryRequestContextProps>(initialQueryRequest)\r\n\r\nconst QueryRequestProvider: FC = ({children}) => {\r\n  const [state, setState] = useState<QueryState>(initialQueryRequest.state)\r\n\r\n  const updateState = (updates: Partial<QueryState>) => {\r\n    const updatedState = {...state, ...updates} as QueryState\r\n    setState(updatedState)\r\n  }\r\n\r\n  return (\r\n    <QueryRequestContext.Provider value={{state, updateState}}>\r\n      {children}\r\n    </QueryRequestContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryRequest = () => useContext(QueryRequestContext)\r\nexport {QueryRequestProvider, useQueryRequest}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {FC, useContext, useState, useEffect, useMemo} from 'react'\r\nimport {useQuery} from 'react-query'\r\nimport {\r\n  createResponseContext,\r\n  initialQueryResponse,\r\n  initialQueryState,\r\n  PaginationState,\r\n  QUERIES,\r\n  stringifyRequestQuery,\r\n} from '../../../../../../_metronic/helpers'\r\nimport {getUsers} from './_requests'\r\nimport {User} from './_models'\r\nimport {useQueryRequest} from './QueryRequestProvider'\r\n\r\nconst QueryResponseContext = createResponseContext<User>(initialQueryResponse)\r\nconst QueryResponseProvider: FC = ({children}) => {\r\n  const {state} = useQueryRequest()\r\n  const [query, setQuery] = useState<string>(stringifyRequestQuery(state))\r\n  const updatedQuery = useMemo(() => stringifyRequestQuery(state), [state])\r\n\r\n  useEffect(() => {\r\n    if (query !== updatedQuery) {\r\n      setQuery(updatedQuery)\r\n    }\r\n  }, [updatedQuery])\r\n\r\n  const {\r\n    isFetching,\r\n    refetch,\r\n    data: response,\r\n  } = useQuery(\r\n    `${QUERIES.USERS_LIST}-${query}`,\r\n    () => {\r\n      return getUsers(query)\r\n    },\r\n    {cacheTime: 0, keepPreviousData: true, refetchOnWindowFocus: false}\r\n  )\r\n\r\n  return (\r\n    <QueryResponseContext.Provider value={{isLoading: isFetching, refetch, response, query}}>\r\n      {children}\r\n    </QueryResponseContext.Provider>\r\n  )\r\n}\r\n\r\nconst useQueryResponse = () => useContext(QueryResponseContext)\r\n\r\nconst useQueryResponseData = () => {\r\n  const {response} = useQueryResponse()\r\n  if (!response) {\r\n    return []\r\n  }\r\n\r\n  return response?.data || []\r\n}\r\n\r\nconst useQueryResponsePagination = () => {\r\n  const defaultPaginationState: PaginationState = {\r\n    links: [],\r\n    ...initialQueryState,\r\n  }\r\n\r\n  const {response} = useQueryResponse()\r\n  if (!response || !response.payload || !response.payload.pagination) {\r\n    return defaultPaginationState\r\n  }\r\n\r\n  return response.payload.pagination\r\n}\r\n\r\nconst useQueryResponseLoading = (): boolean => {\r\n  const {isLoading} = useQueryResponse()\r\n  return isLoading\r\n}\r\n\r\nexport {\r\n  QueryResponseProvider,\r\n  useQueryResponse,\r\n  useQueryResponseData,\r\n  useQueryResponsePagination,\r\n  useQueryResponseLoading,\r\n}\r\n","import {FC, useState, createContext, useContext, useMemo} from 'react'\r\nimport {\r\n  ID,\r\n  calculatedGroupingIsDisabled,\r\n  calculateIsAllDataSelected,\r\n  groupingOnSelect,\r\n  initialListView,\r\n  ListViewContextProps,\r\n  groupingOnSelectAll,\r\n} from '../../../../../../_metronic/helpers'\r\nimport {useQueryResponse, useQueryResponseData} from './QueryResponseProvider'\r\n\r\nconst ListViewContext = createContext<ListViewContextProps>(initialListView)\r\n\r\nconst ListViewProvider: FC = ({children}) => {\r\n  const [selected, setSelected] = useState<Array<ID>>(initialListView.selected)\r\n  const [itemIdForUpdate, setItemIdForUpdate] = useState<ID>(initialListView.itemIdForUpdate)\r\n  const {isLoading} = useQueryResponse()\r\n  const data = useQueryResponseData()\r\n  const disabled = useMemo(() => calculatedGroupingIsDisabled(isLoading, data), [isLoading, data])\r\n  const isAllSelected = useMemo(() => calculateIsAllDataSelected(data, selected), [data, selected])\r\n\r\n  return (\r\n    <ListViewContext.Provider\r\n      value={{\r\n        selected,\r\n        itemIdForUpdate,\r\n        setItemIdForUpdate,\r\n        disabled,\r\n        isAllSelected,\r\n        onSelect: (id: ID) => {\r\n          groupingOnSelect(id, selected, setSelected)\r\n        },\r\n        onSelectAll: () => {\r\n          groupingOnSelectAll(isAllSelected, setSelected, data)\r\n        },\r\n        clearSelected: () => {\r\n          setSelected([])\r\n        },\r\n      }}\r\n    >\r\n      {children}\r\n    </ListViewContext.Provider>\r\n  )\r\n}\r\n\r\nconst useListView = () => useContext(ListViewContext)\r\n\r\nexport {ListViewProvider, useListView}\r\n","import {useEffect, useState} from 'react'\r\nimport {MenuComponent} from '../../../../../../../_metronic/assets/ts/components'\r\nimport {initialQueryState, KTSVG} from '../../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\n\r\nconst UsersListFilter = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const {isLoading} = useQueryResponse()\r\n  const [role, setRole] = useState<string | undefined>()\r\n  const [lastLogin, setLastLogin] = useState<string | undefined>()\r\n\r\n  useEffect(() => {\r\n    MenuComponent.reinitialization()\r\n  }, [])\r\n\r\n  const resetData = () => {\r\n    updateState({filter: undefined, ...initialQueryState})\r\n  }\r\n\r\n  const filterData = () => {\r\n    updateState({\r\n      filter: {role, last_login: lastLogin},\r\n      ...initialQueryState,\r\n    })\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* begin::Filter Button */}\r\n      <button\r\n        disabled={isLoading}\r\n        type='button'\r\n        className='btn btn-light-primary me-3'\r\n        data-kt-menu-trigger='click'\r\n        data-kt-menu-placement='bottom-end'\r\n      >\r\n        <KTSVG path='/media/icons/duotune/general/gen031.svg' className='svg-icon-2' />\r\n        Filter\r\n      </button>\r\n      {/* end::Filter Button */}\r\n      {/* begin::SubMenu */}\r\n      <div className='menu menu-sub menu-sub-dropdown w-300px w-md-325px' data-kt-menu='true'>\r\n        {/* begin::Header */}\r\n        <div className='px-7 py-5'>\r\n          <div className='fs-5 text-dark fw-bolder'>Filter Options</div>\r\n        </div>\r\n        {/* end::Header */}\r\n\r\n        {/* begin::Separator */}\r\n        <div className='separator border-gray-200'></div>\r\n        {/* end::Separator */}\r\n\r\n        {/* begin::Content */}\r\n        <div className='px-7 py-5' data-kt-user-table-filter='form'>\r\n          {/* begin::Input group */}\r\n          <div className='mb-10'>\r\n            <label className='form-label fs-6 fw-bold'>Role:</label>\r\n            <select\r\n              className='form-select form-select-solid fw-bolder'\r\n              data-kt-select2='true'\r\n              data-placeholder='Select option'\r\n              data-allow-clear='true'\r\n              data-kt-user-table-filter='role'\r\n              data-hide-search='true'\r\n              onChange={(e) => setRole(e.target.value)}\r\n              value={role}\r\n            >\r\n              <option value=''></option>\r\n              <option value='Administrator'>Administrator</option>\r\n              <option value='Analyst'>Analyst</option>\r\n              <option value='Developer'>Developer</option>\r\n              <option value='Support'>Support</option>\r\n              <option value='Trial'>Trial</option>\r\n            </select>\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Input group */}\r\n          <div className='mb-10'>\r\n            <label className='form-label fs-6 fw-bold'>Last login:</label>\r\n            <select\r\n              className='form-select form-select-solid fw-bolder'\r\n              data-kt-select2='true'\r\n              data-placeholder='Select option'\r\n              data-allow-clear='true'\r\n              data-kt-user-table-filter='two-step'\r\n              data-hide-search='true'\r\n              onChange={(e) => setLastLogin(e.target.value)}\r\n              value={lastLogin}\r\n            >\r\n              <option value=''></option>\r\n              <option value='Yesterday'>Yesterday</option>\r\n              <option value='20 mins ago'>20 mins ago</option>\r\n              <option value='5 hours ago'>5 hours ago</option>\r\n              <option value='2 days ago'>2 days ago</option>\r\n            </select>\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Actions */}\r\n          <div className='d-flex justify-content-end'>\r\n            <button\r\n              type='button'\r\n              disabled={isLoading}\r\n              onClick={filterData}\r\n              className='btn btn-light btn-active-light-primary fw-bold me-2 px-6'\r\n              data-kt-menu-dismiss='true'\r\n              data-kt-user-table-filter='reset'\r\n            >\r\n              Reset\r\n            </button>\r\n            <button\r\n              disabled={isLoading}\r\n              type='button'\r\n              onClick={resetData}\r\n              className='btn btn-primary fw-bold px-6'\r\n              data-kt-menu-dismiss='true'\r\n              data-kt-user-table-filter='filter'\r\n            >\r\n              Apply\r\n            </button>\r\n          </div>\r\n          {/* end::Actions */}\r\n        </div>\r\n        {/* end::Content */}\r\n      </div>\r\n      {/* end::SubMenu */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UsersListFilter}\r\n","import {KTSVG} from '../../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListFilter} from './UsersListFilter'\r\n\r\nconst UsersListToolbar = () => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const openAddUserModal = () => {\r\n    setItemIdForUpdate(null)\r\n  }\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end' data-kt-user-table-toolbar='base'>\r\n      <UsersListFilter />\r\n\r\n      {/* begin::Export */}\r\n      <button type='button' className='btn btn-light-primary me-3'>\r\n        <KTSVG path='/media/icons/duotune/arrows/arr078.svg' className='svg-icon-2' />\r\n        Export\r\n      </button>\r\n      {/* end::Export */}\r\n\r\n      {/* begin::Add user */}\r\n      <button type='button' className='btn btn-primary' onClick={openAddUserModal}>\r\n        <KTSVG path='/media/icons/duotune/arrows/arr075.svg' className='svg-icon-2' />\r\n        Add User\r\n      </button>\r\n      {/* end::Add user */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListToolbar}\r\n","import {useQueryClient, useMutation} from 'react-query'\r\nimport {QUERIES} from '../../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteSelectedUsers} from '../../core/_requests'\r\n\r\nconst UsersListGrouping = () => {\r\n  const {selected, clearSelected} = useListView()\r\n  const queryClient = useQueryClient()\r\n  const {query} = useQueryResponse()\r\n\r\n  const deleteSelectedItems = useMutation(() => deleteSelectedUsers(selected), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n      clearSelected()\r\n    },\r\n  })\r\n\r\n  return (\r\n    <div className='d-flex justify-content-end align-items-center'>\r\n      <div className='fw-bolder me-5'>\r\n        <span className='me-2'>{selected.length}</span> Selected\r\n      </div>\r\n\r\n      <button\r\n        type='button'\r\n        className='btn btn-danger'\r\n        onClick={async () => await deleteSelectedItems.mutateAsync()}\r\n      >\r\n        Delete Selected\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListGrouping}\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport {useState, useEffect} from 'react'\r\nimport {initialQueryState, KTSVG, useDebounce} from '../../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\n\r\nconst UsersListSearchComponent = () => {\r\n  const {updateState} = useQueryRequest()\r\n  const [searchTerm, setSearchTerm] = useState<string>('')\r\n  // Debounce search term so that it only gives us latest value ...\r\n  // ... if searchTerm has not been updated within last 500ms.\r\n  // The goal is to only have the API call fire when user stops typing ...\r\n  // ... so that we aren't hitting our API rapidly.\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 150)\r\n  // Effect for API call\r\n  useEffect(\r\n    () => {\r\n      if (debouncedSearchTerm !== undefined && searchTerm !== undefined) {\r\n        updateState({search: debouncedSearchTerm, ...initialQueryState})\r\n      }\r\n    },\r\n    [debouncedSearchTerm] // Only call effect if debounced search term changes\r\n    // More details about useDebounce: https://usehooks.com/useDebounce/\r\n  )\r\n\r\n  return (\r\n    <div className='card-title'>\r\n      {/* begin::Search */}\r\n      <div className='d-flex align-items-center position-relative my-1'>\r\n        <KTSVG\r\n          path='/media/icons/duotune/general/gen021.svg'\r\n          className='svg-icon-1 position-absolute ms-6'\r\n        />\r\n        <input\r\n          type='text'\r\n          data-kt-user-table-filter='search'\r\n          className='form-control form-control-solid w-250px ps-14'\r\n          placeholder='Search user'\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n        />\r\n      </div>\r\n      {/* end::Search */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListSearchComponent}\r\n","import {useListView} from '../../core/ListViewProvider'\r\nimport {UsersListToolbar} from './UserListToolbar'\r\nimport {UsersListGrouping} from './UsersListGrouping'\r\nimport {UsersListSearchComponent} from './UsersListSearchComponent'\r\n\r\nconst UsersListHeader = () => {\r\n  const {selected} = useListView()\r\n  return (\r\n    <div className='card-header border-0 pt-6'>\r\n      <UsersListSearchComponent />\r\n      {/* begin::Card toolbar */}\r\n      <div className='card-toolbar'>\r\n        {/* begin::Group actions */}\r\n        {selected.length > 0 ? <UsersListGrouping /> : <UsersListToolbar />}\r\n        {/* end::Group actions */}\r\n      </div>\r\n      {/* end::Card toolbar */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListHeader}\r\n","import {FC} from 'react'\r\nimport {ColumnInstance} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  column: ColumnInstance<User>\r\n}\r\n\r\nconst CustomHeaderColumn: FC<Props> = ({column}) => (\r\n  <>\r\n    {column.Header && typeof column.Header === 'string' ? (\r\n      <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n    ) : (\r\n      column.render('Header')\r\n    )}\r\n  </>\r\n)\r\n\r\nexport {CustomHeaderColumn}\r\n","import clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {Row} from 'react-table'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  row: Row<User>\r\n}\r\n\r\nconst CustomRow: FC<Props> = ({row}) => (\r\n  <tr {...row.getRowProps()}>\r\n    {row.cells.map((cell) => {\r\n      return (\r\n        <td\r\n          {...cell.getCellProps()}\r\n          className={clsx({'text-end min-w-100px': cell.column.id === 'actions'})}\r\n        >\r\n          {cell.render('Cell')}\r\n        </td>\r\n      )\r\n    })}\r\n  </tr>\r\n)\r\n\r\nexport {CustomRow}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {FC} from 'react'\r\nimport {toAbsoluteUrl} from '../../../../../../../_metronic/helpers'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  user: User\r\n}\r\n\r\nconst UserInfoCell: FC<Props> = ({user}) => (\r\n  <div className='d-flex align-items-center'>\r\n    {/* begin:: Avatar */}\r\n    <div className='symbol symbol-circle symbol-50px overflow-hidden me-3'>\r\n      <a href='#'>\r\n        {user.avatar ? (\r\n          <div className='symbol-label'>\r\n            <img src={toAbsoluteUrl(`/media/${user.avatar}`)} alt={user.name} className='w-100' />\r\n          </div>\r\n        ) : (\r\n          <div\r\n            className={clsx(\r\n              'symbol-label fs-3',\r\n              `bg-light-${user.initials?.state}`,\r\n              `text-${user.initials?.state}`\r\n            )}\r\n          >\r\n            {user.initials?.label}\r\n          </div>\r\n        )}\r\n      </a>\r\n    </div>\r\n    <div className='d-flex flex-column'>\r\n      <a href='#' className='text-gray-800 text-hover-primary mb-1'>\r\n        {user.name}\r\n      </a>\r\n      <span>{user.email}</span>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport {UserInfoCell}\r\n","import {FC} from 'react'\r\n\r\ntype Props = {\r\n  last_login?: string\r\n}\r\n\r\nconst UserLastLoginCell: FC<Props> = ({last_login}) => (\r\n  <div className='badge badge-light fw-bolder'>{last_login}</div>\r\n)\r\n\r\nexport {UserLastLoginCell}\r\n","import {FC} from 'react'\r\n\r\ntype Props = {\r\n  two_steps?: boolean\r\n}\r\n\r\nconst UserTwoStepsCell: FC<Props> = ({two_steps}) => (\r\n  <> {two_steps && <div className='badge badge-light-success fw-bolder'>Enabled</div>}</>\r\n)\r\n\r\nexport {UserTwoStepsCell}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport {FC, useEffect} from 'react'\r\nimport {useMutation, useQueryClient} from 'react-query'\r\nimport {MenuComponent} from '../../../../../../../_metronic/assets/ts/components'\r\nimport {ID, KTSVG, QUERIES} from '../../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {useQueryResponse} from '../../core/QueryResponseProvider'\r\nimport {deleteUser} from '../../core/_requests'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserActionsCell: FC<Props> = ({id}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {query} = useQueryResponse()\r\n  const queryClient = useQueryClient()\r\n\r\n  useEffect(() => {\r\n    MenuComponent.reinitialization()\r\n  }, [])\r\n\r\n  const openEditModal = () => {\r\n    setItemIdForUpdate(id)\r\n  }\r\n\r\n  const deleteItem = useMutation(() => deleteUser(id), {\r\n    // 💡 response of the mutation is passed to onSuccess\r\n    onSuccess: () => {\r\n      // ✅ update detail view directly\r\n      queryClient.invalidateQueries([`${QUERIES.USERS_LIST}-${query}`])\r\n    },\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <a\r\n        href='#'\r\n        className='btn btn-light btn-active-light-primary btn-sm'\r\n        data-kt-menu-trigger='click'\r\n        data-kt-menu-placement='bottom-end'\r\n      >\r\n        Actions\r\n        <KTSVG path='/media/icons/duotune/arrows/arr072.svg' className='svg-icon-5 m-0' />\r\n      </a>\r\n      {/* begin::Menu */}\r\n      <div\r\n        className='menu menu-sub menu-sub-dropdown menu-column menu-rounded menu-gray-600 menu-state-bg-light-primary fw-bold fs-7 w-125px py-4'\r\n        data-kt-menu='true'\r\n      >\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item px-3'>\r\n          <a className='menu-link px-3' onClick={openEditModal}>\r\n            Edit\r\n          </a>\r\n        </div>\r\n        {/* end::Menu item */}\r\n\r\n        {/* begin::Menu item */}\r\n        <div className='menu-item px-3'>\r\n          <a\r\n            className='menu-link px-3'\r\n            data-kt-users-table-filter='delete_row'\r\n            onClick={async () => await deleteItem.mutateAsync()}\r\n          >\r\n            Delete\r\n          </a>\r\n        </div>\r\n        {/* end::Menu item */}\r\n      </div>\r\n      {/* end::Menu */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserActionsCell}\r\n","import {FC, useMemo} from 'react'\r\nimport {ID} from '../../../../../../../_metronic/helpers'\r\nimport {useListView} from '../../core/ListViewProvider'\r\n\r\ntype Props = {\r\n  id: ID\r\n}\r\n\r\nconst UserSelectionCell: FC<Props> = ({id}) => {\r\n  const {selected, onSelect} = useListView()\r\n  const isSelected = useMemo(() => selected.includes(id), [id, selected])\r\n  return (\r\n    <div className='form-check form-check-sm form-check-custom form-check-solid'>\r\n      <input\r\n        className='form-check-input'\r\n        type='checkbox'\r\n        data-kt-check={isSelected}\r\n        data-kt-check-target='#kt_table_users .form-check-input'\r\n        checked={isSelected}\r\n        onChange={() => onSelect(id)}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserSelectionCell}\r\n","import clsx from 'clsx'\r\nimport {FC, PropsWithChildren, useMemo} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {initialQueryState} from '../../../../../../../_metronic/helpers'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  className?: string\r\n  title?: string\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\nconst UserCustomHeader: FC<Props> = ({className, title, tableProps}) => {\r\n  const id = tableProps.column.id\r\n  const {state, updateState} = useQueryRequest()\r\n\r\n  const isSelectedForSorting = useMemo(() => {\r\n    return state.sort && state.sort === id\r\n  }, [state, id])\r\n  const order: 'asc' | 'desc' | undefined = useMemo(() => state.order, [state])\r\n\r\n  const sortColumn = () => {\r\n    // avoid sorting for these columns\r\n    if (id === 'actions' || id === 'selection') {\r\n      return\r\n    }\r\n\r\n    if (!isSelectedForSorting) {\r\n      // enable sort asc\r\n      updateState({sort: id, order: 'asc', ...initialQueryState})\r\n      return\r\n    }\r\n\r\n    if (isSelectedForSorting && order !== undefined) {\r\n      if (order === 'asc') {\r\n        // enable sort desc\r\n        updateState({sort: id, order: 'desc', ...initialQueryState})\r\n        return\r\n      }\r\n\r\n      // disable sort\r\n      updateState({sort: undefined, order: undefined, ...initialQueryState})\r\n    }\r\n  }\r\n\r\n  return (\r\n    <th\r\n      {...tableProps.column.getHeaderProps()}\r\n      className={clsx(\r\n        className,\r\n        isSelectedForSorting && order !== undefined && `table-sort-${order}`\r\n      )}\r\n      style={{cursor: 'pointer'}}\r\n      onClick={sortColumn}\r\n    >\r\n      {title}\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserCustomHeader}\r\n","import {FC, PropsWithChildren} from 'react'\r\nimport {HeaderProps} from 'react-table'\r\nimport {useListView} from '../../core/ListViewProvider'\r\nimport {User} from '../../core/_models'\r\n\r\ntype Props = {\r\n  tableProps: PropsWithChildren<HeaderProps<User>>\r\n}\r\n\r\nconst UserSelectionHeader: FC<Props> = ({tableProps}) => {\r\n  const {isAllSelected, onSelectAll} = useListView()\r\n  return (\r\n    <th {...tableProps.column.getHeaderProps()} className='w-10px pe-2'>\r\n      <div className='form-check form-check-sm form-check-custom form-check-solid me-3'>\r\n        <input\r\n          className='form-check-input'\r\n          type='checkbox'\r\n          data-kt-check={isAllSelected}\r\n          data-kt-check-target='#kt_table_users .form-check-input'\r\n          checked={isAllSelected}\r\n          onChange={onSelectAll}\r\n        />\r\n      </div>\r\n    </th>\r\n  )\r\n}\r\n\r\nexport {UserSelectionHeader}\r\n","import {Column} from 'react-table'\r\nimport {UserInfoCell} from './UserInfoCell'\r\nimport {UserLastLoginCell} from './UserLastLoginCell'\r\nimport {UserTwoStepsCell} from './UserTwoStepsCell'\r\nimport {UserActionsCell} from './UserActionsCell'\r\nimport {UserSelectionCell} from './UserSelectionCell'\r\nimport {UserCustomHeader} from './UserCustomHeader'\r\nimport {UserSelectionHeader} from './UserSelectionHeader'\r\nimport {User} from '../../core/_models'\r\n\r\nconst usersColumns: ReadonlyArray<Column<User>> = [\r\n  {\r\n    Header: (props) => <UserSelectionHeader tableProps={props} />,\r\n    id: 'selection',\r\n    Cell: ({...props}) => <UserSelectionCell id={props.data[props.row.index].id} />,\r\n  },\r\n  {\r\n    Header: (props) => <UserCustomHeader tableProps={props} title='Name' className='min-w-125px' />,\r\n    id: 'name',\r\n    Cell: ({...props}) => <UserInfoCell user={props.data[props.row.index]} />,\r\n  },\r\n  {\r\n    Header: (props) => <UserCustomHeader tableProps={props} title='Role' className='min-w-125px' />,\r\n    accessor: 'role',\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Last login' className='min-w-125px' />\r\n    ),\r\n    id: 'last_login',\r\n    Cell: ({...props}) => <UserLastLoginCell last_login={props.data[props.row.index].last_login} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Two steps' className='min-w-125px' />\r\n    ),\r\n    id: 'two_steps',\r\n    Cell: ({...props}) => <UserTwoStepsCell two_steps={props.data[props.row.index].two_steps} />,\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Joined day' className='min-w-125px' />\r\n    ),\r\n    accessor: 'joined_day',\r\n  },\r\n  {\r\n    Header: (props) => (\r\n      <UserCustomHeader tableProps={props} title='Actions' className='text-end min-w-100px' />\r\n    ),\r\n    id: 'actions',\r\n    Cell: ({...props}) => <UserActionsCell id={props.data[props.row.index].id} />,\r\n  },\r\n]\r\n\r\nexport {usersColumns}\r\n","const UsersListLoading = () => {\r\n  const styles = {\r\n    borderRadius: '0.475rem',\r\n    boxShadow: '0 0 50px 0 rgb(82 63 105 / 15%)',\r\n    backgroundColor: '#fff',\r\n    color: '#7e8299',\r\n    fontWeight: '500',\r\n    margin: '0',\r\n    width: 'auto',\r\n    padding: '1rem 2rem',\r\n    top: 'calc(50% - 2rem)',\r\n    left: 'calc(50% - 4rem)',\r\n  }\r\n\r\n  return <div style={{...styles, position: 'absolute', textAlign: 'center'}}>Processing...</div>\r\n}\r\n\r\nexport {UsersListLoading}\r\n","/* eslint-disable jsx-a11y/anchor-is-valid */\r\nimport clsx from 'clsx'\r\nimport {useQueryResponseLoading, useQueryResponsePagination} from '../../core/QueryResponseProvider'\r\nimport {useQueryRequest} from '../../core/QueryRequestProvider'\r\nconst UsersListPagination = () => {\r\n  const pagination = useQueryResponsePagination()\r\n  const isLoading = useQueryResponseLoading()\r\n  const {updateState} = useQueryRequest()\r\n  const updatePage = (page: number | null) => {\r\n    if (!page || isLoading || pagination.page === page) {\r\n      return\r\n    }\r\n\r\n    updateState({page, items_per_page: pagination.items_per_page || 10})\r\n  }\r\n\r\n  return (\r\n    <div className='row'>\r\n      <div className='col-sm-12 col-md-5 d-flex align-items-center justify-content-center justify-content-md-start'></div>\r\n      <div className='col-sm-12 col-md-7 d-flex align-items-center justify-content-center justify-content-md-end'>\r\n        <div id='kt_table_users_paginate'>\r\n          <ul className='pagination'>\r\n            {pagination.links?.map((link) => (\r\n              <li\r\n                key={link.label}\r\n                className={clsx('page-item', {\r\n                  active: pagination.page === link.page,\r\n                  disabled: isLoading,\r\n                  previous: link.label === '&laquo; Previous',\r\n                  next: link.label === 'Next &raquo;',\r\n                })}\r\n              >\r\n                <a\r\n                  className='page-link'\r\n                  onClick={() => updatePage(link.page)}\r\n                  dangerouslySetInnerHTML={{__html: link.label}}\r\n                  style={{cursor: 'pointer'}}\r\n                />\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UsersListPagination}\r\n","import {useMemo} from 'react'\r\nimport {useTable, ColumnInstance, Row} from 'react-table'\r\nimport {CustomHeaderColumn} from '../table/columns/CustomHeaderColumn'\r\nimport {CustomRow} from '../table/columns/CustomRow'\r\nimport {useQueryResponseData, useQueryResponseLoading} from '../core/QueryResponseProvider'\r\nimport {usersColumns} from './columns/_columns'\r\nimport {User} from '../core/_models'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {UsersListPagination} from '../components/pagination/UsersListPagination'\r\nimport {KTCardBody} from '../../../../../../_metronic/helpers'\r\n\r\nconst UsersTable = () => {\r\n  const users = useQueryResponseData()\r\n  const isLoading = useQueryResponseLoading()\r\n  const data = useMemo(() => users, [users])\r\n  const columns = useMemo(() => usersColumns, [])\r\n  const {getTableProps, getTableBodyProps, headers, rows, prepareRow} = useTable({\r\n    columns,\r\n    data,\r\n  })\r\n\r\n  return (\r\n    <KTCardBody className='py-4'>\r\n      <div className='table-responsive'>\r\n        <table\r\n          id='kt_table_users'\r\n          className='table align-middle table-row-dashed fs-6 gy-5 dataTable no-footer'\r\n          {...getTableProps()}\r\n        >\r\n          <thead>\r\n            <tr className='text-start text-muted fw-bolder fs-7 text-uppercase gs-0'>\r\n              {headers.map((column: ColumnInstance<User>) => (\r\n                <CustomHeaderColumn key={column.id} column={column} />\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody className='text-gray-600 fw-bold' {...getTableBodyProps()}>\r\n            {rows.length > 0 ? (\r\n              rows.map((row: Row<User>, i) => {\r\n                prepareRow(row)\r\n                return <CustomRow row={row} key={`row-${i}-${row.id}`} />\r\n              })\r\n            ) : (\r\n              <tr>\r\n                <td colSpan={7}>\r\n                  <div className='d-flex text-center w-100 align-content-center justify-content-center'>\r\n                    No matching records found\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <UsersListPagination />\r\n      {isLoading && <UsersListLoading />}\r\n    </KTCardBody>\r\n  )\r\n}\r\n\r\nexport {UsersTable}\r\n","import {KTSVG} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\n\r\nconst UserEditModalHeader = () => {\r\n  const {setItemIdForUpdate} = useListView()\r\n\r\n  return (\r\n    <div className='modal-header'>\r\n      {/* begin::Modal title */}\r\n      <h2 className='fw-bolder'>Add User</h2>\r\n      {/* end::Modal title */}\r\n\r\n      {/* begin::Close */}\r\n      <div\r\n        className='btn btn-icon btn-sm btn-active-icon-primary'\r\n        data-kt-users-modal-action='close'\r\n        onClick={() => setItemIdForUpdate(undefined)}\r\n        style={{cursor: 'pointer'}}\r\n      >\r\n        <KTSVG path='/media/icons/duotune/arrows/arr061.svg' className='svg-icon-1' />\r\n      </div>\r\n      {/* end::Close */}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport {UserEditModalHeader}\r\n","import {ID, Response} from '../../../../../../_metronic/helpers'\r\nexport type User = {\r\n  id?: ID\r\n  name?: string\r\n  avatar?: string\r\n  email?: string\r\n  position?: string\r\n  role?: string\r\n  last_login?: string\r\n  two_steps?: boolean\r\n  joined_day?: string\r\n  online?: boolean\r\n  initials?: {\r\n    label: string\r\n    state: string\r\n  }\r\n}\r\n\r\nexport type UsersQueryResponse = Response<Array<User>>\r\n\r\nexport const initialUser: User = {\r\n  avatar: 'avatars/300-6.jpg',\r\n  position: 'Art Director',\r\n  role: 'Administrator',\r\n  name: '',\r\n  email: '',\r\n}\r\n","import {FC, useState} from 'react'\r\nimport * as Yup from 'yup'\r\nimport {useFormik} from 'formik'\r\nimport {isNotEmpty, toAbsoluteUrl} from '../../../../../../_metronic/helpers'\r\nimport {initialUser, User} from '../core/_models'\r\nimport clsx from 'clsx'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {UsersListLoading} from '../components/loading/UsersListLoading'\r\nimport {createUser, updateUser} from '../core/_requests'\r\nimport {useQueryResponse} from '../core/QueryResponseProvider'\r\n\r\ntype Props = {\r\n  isUserLoading: boolean\r\n  user: User\r\n}\r\n\r\nconst editUserSchema = Yup.object().shape({\r\n  email: Yup.string()\r\n    .email('Wrong email format')\r\n    .min(3, 'Minimum 3 symbols')\r\n    .max(50, 'Maximum 50 symbols')\r\n    .required('Email is required'),\r\n  name: Yup.string()\r\n    .min(3, 'Minimum 3 symbols')\r\n    .max(50, 'Maximum 50 symbols')\r\n    .required('Name is required'),\r\n})\r\n\r\nconst UserEditModalForm: FC<Props> = ({user, isUserLoading}) => {\r\n  const {setItemIdForUpdate} = useListView()\r\n  const {refetch} = useQueryResponse()\r\n\r\n  const [userForEdit] = useState<User>({\r\n    ...user,\r\n    avatar: user.avatar || initialUser.avatar,\r\n    role: user.role || initialUser.role,\r\n    position: user.position || initialUser.position,\r\n    name: user.name || initialUser.name,\r\n    email: user.email || initialUser.email,\r\n  })\r\n\r\n  const cancel = (withRefresh?: boolean) => {\r\n    if (withRefresh) {\r\n      refetch()\r\n    }\r\n    setItemIdForUpdate(undefined)\r\n  }\r\n\r\n  const blankImg = toAbsoluteUrl('/media/svg/avatars/blank.svg')\r\n  const userAvatarImg = toAbsoluteUrl(`/media/${userForEdit.avatar}`)\r\n\r\n  const formik = useFormik({\r\n    initialValues: userForEdit,\r\n    validationSchema: editUserSchema,\r\n    onSubmit: async (values, {setSubmitting}) => {\r\n      setSubmitting(true)\r\n      try {\r\n        if (isNotEmpty(values.id)) {\r\n          await updateUser(values)\r\n        } else {\r\n          await createUser(values)\r\n        }\r\n      } catch (ex) {\r\n        console.error(ex)\r\n      } finally {\r\n        setSubmitting(true)\r\n        cancel(true)\r\n      }\r\n    },\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <form id='kt_modal_add_user_form' className='form' onSubmit={formik.handleSubmit} noValidate>\r\n        {/* begin::Scroll */}\r\n        <div\r\n          className='d-flex flex-column scroll-y me-n7 pe-7'\r\n          id='kt_modal_add_user_scroll'\r\n          data-kt-scroll='true'\r\n          data-kt-scroll-activate='{default: false, lg: true}'\r\n          data-kt-scroll-max-height='auto'\r\n          data-kt-scroll-dependencies='#kt_modal_add_user_header'\r\n          data-kt-scroll-wrappers='#kt_modal_add_user_scroll'\r\n          data-kt-scroll-offset='300px'\r\n        >\r\n          {/* begin::Input group */}\r\n          <div className='fv-row mb-7'>\r\n            {/* begin::Label */}\r\n            <label className='d-block fw-bold fs-6 mb-5'>Avatar</label>\r\n            {/* end::Label */}\r\n\r\n            {/* begin::Image input */}\r\n            <div\r\n              className='image-input image-input-outline'\r\n              data-kt-image-input='true'\r\n              style={{backgroundImage: `url('${blankImg}')`}}\r\n            >\r\n              {/* begin::Preview existing avatar */}\r\n              <div\r\n                className='image-input-wrapper w-125px h-125px'\r\n                style={{backgroundImage: `url('${userAvatarImg}')`}}\r\n              ></div>\r\n              {/* end::Preview existing avatar */}\r\n\r\n              {/* begin::Label */}\r\n              {/* <label\r\n              className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\r\n              data-kt-image-input-action='change'\r\n              data-bs-toggle='tooltip'\r\n              title='Change avatar'\r\n            >\r\n              <i className='bi bi-pencil-fill fs-7'></i>\r\n\r\n              <input type='file' name='avatar' accept='.png, .jpg, .jpeg' />\r\n              <input type='hidden' name='avatar_remove' />\r\n            </label> */}\r\n              {/* end::Label */}\r\n\r\n              {/* begin::Cancel */}\r\n              {/* <span\r\n              className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\r\n              data-kt-image-input-action='cancel'\r\n              data-bs-toggle='tooltip'\r\n              title='Cancel avatar'\r\n            >\r\n              <i className='bi bi-x fs-2'></i>\r\n            </span> */}\r\n              {/* end::Cancel */}\r\n\r\n              {/* begin::Remove */}\r\n              {/* <span\r\n              className='btn btn-icon btn-circle btn-active-color-primary w-25px h-25px bg-body shadow'\r\n              data-kt-image-input-action='remove'\r\n              data-bs-toggle='tooltip'\r\n              title='Remove avatar'\r\n            >\r\n              <i className='bi bi-x fs-2'></i>\r\n            </span> */}\r\n              {/* end::Remove */}\r\n            </div>\r\n            {/* end::Image input */}\r\n\r\n            {/* begin::Hint */}\r\n            {/* <div className='form-text'>Allowed file types: png, jpg, jpeg.</div> */}\r\n            {/* end::Hint */}\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Input group */}\r\n          <div className='fv-row mb-7'>\r\n            {/* begin::Label */}\r\n            <label className='required fw-bold fs-6 mb-2'>Full Name</label>\r\n            {/* end::Label */}\r\n\r\n            {/* begin::Input */}\r\n            <input\r\n              placeholder='Full name'\r\n              {...formik.getFieldProps('name')}\r\n              type='text'\r\n              name='name'\r\n              className={clsx(\r\n                'form-control form-control-solid mb-3 mb-lg-0',\r\n                {'is-invalid': formik.touched.name && formik.errors.name},\r\n                {\r\n                  'is-valid': formik.touched.name && !formik.errors.name,\r\n                }\r\n              )}\r\n              autoComplete='off'\r\n              disabled={formik.isSubmitting || isUserLoading}\r\n            />\r\n            {formik.touched.name && formik.errors.name && (\r\n              <div className='fv-plugins-message-container'>\r\n                <div className='fv-help-block'>\r\n                  <span role='alert'>{formik.errors.name}</span>\r\n                </div>\r\n              </div>\r\n            )}\r\n            {/* end::Input */}\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Input group */}\r\n          <div className='fv-row mb-7'>\r\n            {/* begin::Label */}\r\n            <label className='required fw-bold fs-6 mb-2'>Email</label>\r\n            {/* end::Label */}\r\n\r\n            {/* begin::Input */}\r\n            <input\r\n              placeholder='Email'\r\n              {...formik.getFieldProps('email')}\r\n              className={clsx(\r\n                'form-control form-control-solid mb-3 mb-lg-0',\r\n                {'is-invalid': formik.touched.email && formik.errors.email},\r\n                {\r\n                  'is-valid': formik.touched.email && !formik.errors.email,\r\n                }\r\n              )}\r\n              type='email'\r\n              name='email'\r\n              autoComplete='off'\r\n              disabled={formik.isSubmitting || isUserLoading}\r\n            />\r\n            {/* end::Input */}\r\n            {formik.touched.email && formik.errors.email && (\r\n              <div className='fv-plugins-message-container'>\r\n                <span role='alert'>{formik.errors.email}</span>\r\n              </div>\r\n            )}\r\n          </div>\r\n          {/* end::Input group */}\r\n\r\n          {/* begin::Input group */}\r\n          <div className='mb-7'>\r\n            {/* begin::Label */}\r\n            <label className='required fw-bold fs-6 mb-5'>Role</label>\r\n            {/* end::Label */}\r\n            {/* begin::Roles */}\r\n            {/* begin::Input row */}\r\n            <div className='d-flex fv-row'>\r\n              {/* begin::Radio */}\r\n              <div className='form-check form-check-custom form-check-solid'>\r\n                {/* begin::Input */}\r\n                <input\r\n                  className='form-check-input me-3'\r\n                  {...formik.getFieldProps('role')}\r\n                  name='role'\r\n                  type='radio'\r\n                  value='Administrator'\r\n                  id='kt_modal_update_role_option_0'\r\n                  checked={formik.values.role === 'Administrator'}\r\n                  disabled={formik.isSubmitting || isUserLoading}\r\n                />\r\n\r\n                {/* end::Input */}\r\n                {/* begin::Label */}\r\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_0'>\r\n                  <div className='fw-bolder text-gray-800'>Administrator</div>\r\n                  <div className='text-gray-600'>\r\n                    Best for business owners and company administrators\r\n                  </div>\r\n                </label>\r\n                {/* end::Label */}\r\n              </div>\r\n              {/* end::Radio */}\r\n            </div>\r\n            {/* end::Input row */}\r\n            <div className='separator separator-dashed my-5'></div>\r\n            {/* begin::Input row */}\r\n            <div className='d-flex fv-row'>\r\n              {/* begin::Radio */}\r\n              <div className='form-check form-check-custom form-check-solid'>\r\n                {/* begin::Input */}\r\n                <input\r\n                  className='form-check-input me-3'\r\n                  {...formik.getFieldProps('role')}\r\n                  name='role'\r\n                  type='radio'\r\n                  value='Developer'\r\n                  id='kt_modal_update_role_option_1'\r\n                  checked={formik.values.role === 'Developer'}\r\n                  disabled={formik.isSubmitting || isUserLoading}\r\n                />\r\n                {/* end::Input */}\r\n                {/* begin::Label */}\r\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_1'>\r\n                  <div className='fw-bolder text-gray-800'>Developer</div>\r\n                  <div className='text-gray-600'>\r\n                    Best for developers or people primarily using the API\r\n                  </div>\r\n                </label>\r\n                {/* end::Label */}\r\n              </div>\r\n              {/* end::Radio */}\r\n            </div>\r\n            {/* end::Input row */}\r\n            <div className='separator separator-dashed my-5'></div>\r\n            {/* begin::Input row */}\r\n            <div className='d-flex fv-row'>\r\n              {/* begin::Radio */}\r\n              <div className='form-check form-check-custom form-check-solid'>\r\n                {/* begin::Input */}\r\n                <input\r\n                  className='form-check-input me-3'\r\n                  {...formik.getFieldProps('role')}\r\n                  name='role'\r\n                  type='radio'\r\n                  value='Analyst'\r\n                  id='kt_modal_update_role_option_2'\r\n                  checked={formik.values.role === 'Analyst'}\r\n                  disabled={formik.isSubmitting || isUserLoading}\r\n                />\r\n\r\n                {/* end::Input */}\r\n                {/* begin::Label */}\r\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_2'>\r\n                  <div className='fw-bolder text-gray-800'>Analyst</div>\r\n                  <div className='text-gray-600'>\r\n                    Best for people who need full access to analytics data, but don't need to update\r\n                    business settings\r\n                  </div>\r\n                </label>\r\n                {/* end::Label */}\r\n              </div>\r\n              {/* end::Radio */}\r\n            </div>\r\n            {/* end::Input row */}\r\n            <div className='separator separator-dashed my-5'></div>\r\n            {/* begin::Input row */}\r\n            <div className='d-flex fv-row'>\r\n              {/* begin::Radio */}\r\n              <div className='form-check form-check-custom form-check-solid'>\r\n                {/* begin::Input */}\r\n                <input\r\n                  className='form-check-input me-3'\r\n                  {...formik.getFieldProps('role')}\r\n                  name='role'\r\n                  type='radio'\r\n                  value='Support'\r\n                  id='kt_modal_update_role_option_3'\r\n                  checked={formik.values.role === 'Support'}\r\n                  disabled={formik.isSubmitting || isUserLoading}\r\n                />\r\n                {/* end::Input */}\r\n                {/* begin::Label */}\r\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_3'>\r\n                  <div className='fw-bolder text-gray-800'>Support</div>\r\n                  <div className='text-gray-600'>\r\n                    Best for employees who regularly refund payments and respond to disputes\r\n                  </div>\r\n                </label>\r\n                {/* end::Label */}\r\n              </div>\r\n              {/* end::Radio */}\r\n            </div>\r\n            {/* end::Input row */}\r\n            <div className='separator separator-dashed my-5'></div>\r\n            {/* begin::Input row */}\r\n            <div className='d-flex fv-row'>\r\n              {/* begin::Radio */}\r\n              <div className='form-check form-check-custom form-check-solid'>\r\n                {/* begin::Input */}\r\n                <input\r\n                  className='form-check-input me-3'\r\n                  {...formik.getFieldProps('role')}\r\n                  name='role'\r\n                  type='radio'\r\n                  id='kt_modal_update_role_option_4'\r\n                  value='Trial'\r\n                  checked={formik.values.role === 'Trial'}\r\n                  disabled={formik.isSubmitting || isUserLoading}\r\n                />\r\n                {/* end::Input */}\r\n                {/* begin::Label */}\r\n                <label className='form-check-label' htmlFor='kt_modal_update_role_option_4'>\r\n                  <div className='fw-bolder text-gray-800'>Trial</div>\r\n                  <div className='text-gray-600'>\r\n                    Best for people who need to preview content data, but don't need to make any\r\n                    updates\r\n                  </div>\r\n                </label>\r\n                {/* end::Label */}\r\n              </div>\r\n              {/* end::Radio */}\r\n            </div>\r\n            {/* end::Input row */}\r\n            {/* end::Roles */}\r\n          </div>\r\n          {/* end::Input group */}\r\n        </div>\r\n        {/* end::Scroll */}\r\n\r\n        {/* begin::Actions */}\r\n        <div className='text-center pt-15'>\r\n          <button\r\n            type='reset'\r\n            onClick={() => cancel()}\r\n            className='btn btn-light me-3'\r\n            data-kt-users-modal-action='cancel'\r\n            disabled={formik.isSubmitting || isUserLoading}\r\n          >\r\n            Discard\r\n          </button>\r\n\r\n          <button\r\n            type='submit'\r\n            className='btn btn-primary'\r\n            data-kt-users-modal-action='submit'\r\n            disabled={isUserLoading || formik.isSubmitting || !formik.isValid || !formik.touched}\r\n          >\r\n            <span className='indicator-label'>Submit</span>\r\n            {(formik.isSubmitting || isUserLoading) && (\r\n              <span className='indicator-progress'>\r\n                Please wait...{' '}\r\n                <span className='spinner-border spinner-border-sm align-middle ms-2'></span>\r\n              </span>\r\n            )}\r\n          </button>\r\n        </div>\r\n        {/* end::Actions */}\r\n      </form>\r\n      {(formik.isSubmitting || isUserLoading) && <UsersListLoading />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModalForm}\r\n","import {useQuery} from 'react-query'\r\nimport {UserEditModalForm} from './UserEditModalForm'\r\nimport {isNotEmpty, QUERIES} from '../../../../../../_metronic/helpers'\r\nimport {useListView} from '../core/ListViewProvider'\r\nimport {getUserById} from '../core/_requests'\r\n\r\nconst UserEditModalFormWrapper = () => {\r\n  const {itemIdForUpdate, setItemIdForUpdate} = useListView()\r\n  const enabledQuery: boolean = isNotEmpty(itemIdForUpdate)\r\n  const {\r\n    isLoading,\r\n    data: user,\r\n    error,\r\n  } = useQuery(\r\n    `${QUERIES.USERS_LIST}-user-${itemIdForUpdate}`,\r\n    () => {\r\n      return getUserById(itemIdForUpdate)\r\n    },\r\n    {\r\n      cacheTime: 0,\r\n      enabled: enabledQuery,\r\n      onError: (err) => {\r\n        setItemIdForUpdate(undefined)\r\n        console.error(err)\r\n      },\r\n    }\r\n  )\r\n\r\n  if (!itemIdForUpdate) {\r\n    return <UserEditModalForm isUserLoading={isLoading} user={{id: undefined}} />\r\n  }\r\n\r\n  if (!isLoading && !error && user) {\r\n    return <UserEditModalForm isUserLoading={isLoading} user={user} />\r\n  }\r\n\r\n  return null\r\n}\r\n\r\nexport {UserEditModalFormWrapper}\r\n","import {useEffect} from 'react'\r\nimport {UserEditModalHeader} from './UserEditModalHeader'\r\nimport {UserEditModalFormWrapper} from './UserEditModalFormWrapper'\r\n\r\nconst UserEditModal = () => {\r\n  useEffect(() => {\r\n    document.body.classList.add('modal-open')\r\n    return () => {\r\n      document.body.classList.remove('modal-open')\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div\r\n        className='modal fade show d-block'\r\n        id='kt_modal_add_user'\r\n        role='dialog'\r\n        tabIndex={-1}\r\n        aria-modal='true'\r\n      >\r\n        {/* begin::Modal dialog */}\r\n        <div className='modal-dialog modal-dialog-centered mw-650px'>\r\n          {/* begin::Modal content */}\r\n          <div className='modal-content'>\r\n            <UserEditModalHeader />\r\n            {/* begin::Modal body */}\r\n            <div className='modal-body scroll-y mx-5 mx-xl-15 my-7'>\r\n              <UserEditModalFormWrapper />\r\n            </div>\r\n            {/* end::Modal body */}\r\n          </div>\r\n          {/* end::Modal content */}\r\n        </div>\r\n        {/* end::Modal dialog */}\r\n      </div>\r\n      {/* begin::Modal Backdrop */}\r\n      <div className='modal-backdrop fade show'></div>\r\n      {/* end::Modal Backdrop */}\r\n    </>\r\n  )\r\n}\r\n\r\nexport {UserEditModal}\r\n","import {ListViewProvider, useListView} from './core/ListViewProvider'\r\nimport {QueryRequestProvider} from './core/QueryRequestProvider'\r\nimport {QueryResponseProvider} from './core/QueryResponseProvider'\r\nimport {UsersListHeader} from './components/header/UsersListHeader'\r\nimport {UsersTable} from './table/UsersTable'\r\nimport {UserEditModal} from './user-edit-modal/UserEditModal'\r\nimport {KTCard} from '../../../../../_metronic/helpers'\r\n\r\nconst UsersList = () => {\r\n  const {itemIdForUpdate} = useListView()\r\n  return (\r\n    <>\r\n      <KTCard>\r\n        <UsersListHeader />\r\n        <UsersTable />\r\n      </KTCard>\r\n      {itemIdForUpdate !== undefined && <UserEditModal />}\r\n    </>\r\n  )\r\n}\r\n\r\nconst UsersListWrapper = () => (\r\n  <QueryRequestProvider>\r\n    <QueryResponseProvider>\r\n      <ListViewProvider>\r\n        <UsersList />\r\n      </ListViewProvider>\r\n    </QueryResponseProvider>\r\n  </QueryRequestProvider>\r\n)\r\n\r\nexport {UsersListWrapper}\r\n","import {Route, Routes, Outlet, Navigate} from 'react-router-dom'\r\nimport {PageLink, PageTitle} from '../../../../_metronic/layout/core'\r\nimport {UsersListWrapper} from './users-list/UsersList'\r\n\r\nconst usersBreadcrumbs: Array<PageLink> = [\r\n  {\r\n    title: 'User Management',\r\n    path: '/apps/user-management/users',\r\n    isSeparator: false,\r\n    isActive: false,\r\n  },\r\n  {\r\n    title: '',\r\n    path: '',\r\n    isSeparator: true,\r\n    isActive: false,\r\n  },\r\n]\r\n\r\nconst UsersPage = () => {\r\n  return (\r\n    <Routes>\r\n      <Route element={<Outlet />}>\r\n        <Route\r\n          path='users'\r\n          element={\r\n            <>\r\n              <PageTitle breadcrumbs={usersBreadcrumbs}>Users list</PageTitle>\r\n              <UsersListWrapper />\r\n            </>\r\n          }\r\n        />\r\n      </Route>\r\n      <Route index element={<Navigate to='/apps/user-management/users' />} />\r\n    </Routes>\r\n  )\r\n}\r\n\r\nexport default UsersPage\r\n"],"sourceRoot":""}